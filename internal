// SPDX-License-Identifier: LGPL-3.0-or-later
function convert2Terminals(dict,internal,relativePath,mainlib){
  var temp={};
  if(!mainlib){
    mainlib=temp;
  }
  for(var key in dict){
    if(key=='internal')
      continue;
    var path=relativePath+"."+key;
    if(typeof(dict[key]['createFunction'])=='function'){
      temp[key]=dict[key].createFunction(internal,path,mainlib);
    }else{
      temp[key]=convert2Terminals(dict[key],internal,path,mainlib);
    }
  }
  return temp;
}

function expandTypes(a){
  var accpetedType=a.split('|');
  if(accpetedType.indexOf('ee.Collection')>=0){
    accpetedType.push('ee.FeatureCollection','ee.ImageCollection');
  }
  if(accpetedType.indexOf('ee.Element')>=0){
    accpetedType.push('ee.Feature','ee.Image');
  }
  if(accpetedType.indexOf('integer')>=0){
    accpetedType.push('number');
  }
  return accpetedType;
}

exports.readInputs=function(args,inputs,algoInfo,relPath){
  var output={};
  var arrayInput=true;
  if(args.length==1 && typeof(args[0])==typeof({})
    && (inputs.map(function(x){return x.name}).filter(function(value){return Object.keys(args[0]).indexOf(value)==-1}).length>0 || (Object.keys(args[0]).length===0))){
    output=args[0];
    arrayInput=false;
  }

  var listKeys=Object.keys(output);
  for (var i=0; i<inputs.length; i++){
    if(listKeys.indexOf(inputs[i].name)>=0){
      //if in the dictionary
      var localType=exports.typeObject(output[inputs[i].name]);
      if(expandTypes(inputs[i].type).indexOf(localType)==-1)
      {
        throw 'type for '+ inputs[i].name+' should be '+ inputs[i].type+', but was '+localType;
      }
    }
    else{
      // if list param
      if((args.length<=i) || !arrayInput){
        
        //put default value
        if(!inputs[i].optional)
          if (inputs[i].defaultValue!='undefined')
              output[inputs[i].name]=inputs[i].defaultValue;
            else
              throw relPath+' require '+inputs[i].name+', but no value or default value provided'
      }
      else{
        //if(!inputs[i].optional)
        if(args[i]!==undefined)
          {
            output[inputs[i].name]=args[i];
            var localType=exports.typeObject(output[inputs[i].name]);
            if(expandTypes(inputs[i].type).indexOf(localType)==-1 && !inputs[i].optional)
            {
              throw (i+1)+'-th input should be of type for '+ inputs[i].type+', but was '+localType;
            }
          }
      }
    }
  }
  return output;
}


exports.setupLibrary=function(libs,exp){
  var teminals=convert2Terminals(libs,libs.internal,"OpenEEL");
  teminals.internal=libs;
  
  libs.ref=[];
  libs.internal.addRef=function(ref,path){ref.fullpath=path; libs.ref.push(ref);}
  
  teminals.refs=function(){
    return libs.ref;
  }
  
  return teminals;
};

function getDoc(dict,relativePath){
  var temp={};
  for(var key in dict){
    if(key=='internal')
      continue;
    var path=relativePath+"."+key;
    if(typeof(dict[key]['createFunction'])=='function'){
      temp[key]=dict[key].createDocumentation();
      temp[key].fullPath=path;
    }else{
      temp[key]=getDoc(dict[key],path);
    }
  }
  return temp;
}

exports.getDoc=function(obj){return getDoc(obj,'')}

exports.getDocumentation=function(libs,exp){
  return convert2Terminals(libs,"OpenEEL");
};


exports.typeObject=function(a){ 
  if(typeof(a)=='object' && a==null)
    return 'null';
  if(typeof(a)=='object' && String(a).slice(0,3)=='ee.')
  {
    return String(a).match('ee.*\\(')[0].slice(0,-1);
  }
  else
    return typeof(a);
}

exports.oeeex={sendMessage:function(val){
  print('OEEex_AddonManager:'+val,'if you can see this message, you should download OEEex the Open Earth Engine extension to unravel its full potential!')
}}

exports.oeeex.confirm={retain:function(theKeyText){exports.oeeex.sendMessage('emoveConfirmRetain:'+theKeyText);},
                    release:function(theKeyText){exports.oeeex.sendMessage('removeConfirmRelease:'+theKeyText);}
}

exports.oeeex.export={image:function(config){exports.oeeex.sendMessage('exportImage:'+JSON.stringify(config));},
                      video:function(config){exports.oeeex.sendMessage('exportVideo:'+JSON.stringify(config));},
                      table:function(config){exports.oeeex.sendMessage('exportTable:'+JSON.stringify(config));}
}


