// SPDX-License-Identifier: MIT
var inputs=[{name:'collection',description:'The collection to enhance', type:'ee.ImageCollection',optional:false},
            {name:'enhancingCollection',description:'The collection to use to enhance', type:'ee.ImageCollection',optional:false},
            {name:'matchingProperty',description:'The property to use to do the matching', type:'string',defaultValue:'system:index',optional:false},
            {name:'customFunction',description:'A custom function to merge the two images function(im1,im2) (default: addBands).', type:'function',optional:true},
            {name:'Return',description:'Return', type:'ee.ImageCollection',defaultValue:null,optional:true}
            ]
            
var reference={name:'enhancingCollection',license:'MIT', description:'An algorithm that enhances a collection using another one. Merging image one to one.'};


exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
    
    if(inputDictionary.customFunction){
      var mapFunction=function(img){return inputDictionary.customFunction(ee.Image(img),ee.Image(img.get('matched')));};
    }else{
      var mapFunction=function(img){return ee.Image(img).addBands(ee.Image(img.get('matched')),null,true).setMulti({'matched':null});}
    }
     
    return ee.ImageCollection(ee.Join.saveFirst('matched').apply({
      primary: inputDictionary.collection,
      secondary: inputDictionary.enhancingCollection,
      condition: ee.Filter.equals({leftField: inputDictionary.matchingProperty, rightField: inputDictionary.matchingProperty})
    }).map(mapFunction));
  }
}
