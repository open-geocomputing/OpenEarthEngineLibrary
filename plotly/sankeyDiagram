// SPDX-License-Identifier: LGPL-3.0-or-later
var inputs=[{name:'imageCollection',description:'The input image collection', type:'ee.ImageCollection',optional:false},
            {name:'classRange',description:'An object with the min and max, additionally step cna be defined as well {min:0 max:10}', type:'object', optional:false},
            {name:'region',description:'Region to consider', type:'ee.Geometry|ee.GeometryCollection|ee.Feature', optional:false},
            {name:'scale',description:'Scale of the analysis', type:'number|ee.Number',defaultValue:1000, optional:false},
            {name:'xProperty',description:'The X property. This property is expected to be unique', type:'string|ee.String',defaultValue:"system:time_start", optional:false},
            {name:'band',description:'Band name for an ImageCollection', type:'number|string|ee.String|ee.Number',defaultValue:0, optional:false},
            {name:'colors',description:'A list of color', type:'object[ee.List', optional:true},
            //{name:'reducer',description:'the reducer to use', type:'ee.Reducer',defaultValue:ee.Reducer.count(),optional:false},
            {name:'Return',description:'Return', type:'oeel.Plotly',defaultValue:null,optional:true}
            ]
            
var reference={name:'SankeyDiagrams',license:'LGPL-3.0-or-later', description:'Create a Sankey Diagrams.', contributors:["Mathieu Gravey"]};

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath,oeel){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
     
    var plotObject=oeel.plotly.plot();
    var size=inputDictionary.collection.size()

    inputDictionary.classRange.step=inputDictionary.classRange.step||1;
    var NoC=ee.Number(inputDictionary.classRange.max).add(1).subtract(inputDictionary.classRange.min).divide(inputDictionary.classRange.step);
    
    inputDictionary.region=ee.Algorithms.If({
      condition:ee.Algorithms.ObjectType(inputDictionary.region).equals("Feature"),
      trueCase:inputDictionary.region.geometry(),
      falseCase:inputDictionary.region,
    })
    
    var reducer=ee.Reducer.fixed2DHistogram({
        xMin:inputDictionary.classRange.min,
        xMax:ee.Number(inputDictionary.classRange.max).add(1),
        xSteps:NoC,
        yMin:inputDictionary.classRange.min,
        yMax:ee.Number(inputDictionary.classRange.max).add(1),
        ySteps:NoC,
    });
    
    function hist2DtoList(data,index,numberClass){
      return ee.Array.cat([
        ee.Array(data.get('histogram')),
        ee.Array(data.get('xBuckets')).add(index.multiply(numberClass)).reshape([1,-1]).repeat(0,ee.Array(data.get('yBuckets')).toList().size()),
        ee.Array(data.get('yBuckets')).add(index.add(1).multiply(numberClass)).repeat(1,ee.Array(data.get('xBuckets')).toList().size()),
        ],
        2).reshape([-1,3])
    }
    
    
    var data=ee.List.sequence(0,size.subtract(2),1).map(function(index){
      index=ee.Number(index);
      return hist2DtoList(ee.Dictionary(inputDictionary.collection.toBands().select([index,index.add(1)]).reduceRegion(reducer,inputDictionary.region,inputDictionary.scale)),
      index,NoC)
    })
    
    var color= inputDictionary.color ||["7f0000", "007f7f", "bfff7f", "7fff00", "7f00ff", "3f7f00", "7f3f3f", "3f7f7f", "5f3f7f", "ff0000", "bf7fff", "5f7f3f", "7fffff", "ff7f7f", "3f007f", "00ffff"]

    color=ee.List.repeat(color,NoC).flatten().slice(0,NoC);
    
    data=ee.Array.cat(data,0).transpose().toList();
    var plot=oeel.plotly.plot();
    var colors=ee.List.repeat(color,size).flatten();
    var labels=ee.List.repeat(inputDictionary.collection.aggregate_array(inputDictionary.xProperty),NoC)//.unzip().flatten()

    
    plotObject.addCustom({
      type: "sankey",
      orientation: "h",
      arrangement: "snap",
      node: {
        pad: 10,
        thickness: 25,
        line: {
          color: "black",
          width: 0.1
        },
       label: ee.List.repeat(ee.List.repeat("", inputDictionary.collection.aggregate_array(inputDictionary.xProperty).size()),NoC.subtract(1)).cat([inputDictionary.collection.aggregate_array(inputDictionary.xProperty)]).unzip().flatten(),//,
       color: colors
          },
    
      link:ee.Dictionary.fromLists(["value","source", "target"], data)
    })
    print(plotObject)
    return plotObject;
  }
}
