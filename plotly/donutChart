var inputs=[{name:'featCol',description:'feature Collection we want the property extracted', type:'ee.FeatureCollection',defaultValue:null,optional:false},
            {name:'property',description:'property we want the donut chart', type:'string',defaultValue:null,optional:true},
            {name:'title',description:'title of the donut chart', type:'string',defaultValue:null,optional:true},
            {name:'propertyDescription',description:'description of the properties', type:'string',defaultValue:null,optional:true},
            {name:'Return',description:'Return', type:'oeel.Plotly',defaultValue:null,optional:true} // change the return type accordingly OR remove this line if the function doesnâ€™t have an output
            ]
            
var reference={name:'donutChart',license:'MIT', description:'Return a donut chart of the values, with labels and title', contributors:['Agathe Archidoit']};
// reference can get any supplementary field that can be relevant, in particular
// "experimental" which add a small flask to highlight the experimental point in the documentation,
// "DOI" that automatically add a citation field in the documentation with APA citation,
// but many other can be added such as "contributors" ...

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath,oeel){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
    function donutChart(featCol, property, title, propertyDescription){
  var plotObject=oeel.plotly.plot();
  var data = [];
  var values = [inputDictionary.featCol.aggregate_histogram(inputDictionary.property).values()];
  var labels = [inputDictionary.featCol.aggregate_histogram(inputDictionary.property).keys()];
  var l = values.length;
  
  if (values.length != labels.length){
    throw 'Not as many properties as legends';
  }
  
  var layout = {
    title: inputDictionary.title,
    height: 400,
    width: 600,
    showlegend: true,
    grid: {rows: 1, columns: values.length}
  }
  
  for (var i = 0; i < l; i++){
    data[i] = {
      values : values[i],
      labels : labels[i],
      domain : {column: 0},
      name : inputDictionary.propertyDescription,
      hoverinfo : 'label+percent+name',
      hole : .4,
      type : 'pie'
      }
      
    layout.annotations = [{
        font: {size: 20},
        showarrow: false,
        text: inputDictionary.propertyDescription,
        x: 0.17,
        y: 0.5}]
  }
  
  plotObject.addCustom(data)
  plotObject.setLayout(layout);
  return plotObject;
  }
}
