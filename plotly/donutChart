var inputs=[{name:'Values',description:'values of the donut chart (percentages)', type:'ee.List',defaultValue:null,optional:false},
            {name:'labels',description:'lables of the values', type:'ee.List',defaultValue:null,optional:true},
            {name:'title',description:'title of the donut chart', type:'string',defaultValue:null,optional:true},
            {name:'propertyDescription',description:'description of the properties', type:'string',defaultValue:null,optional:true},
            {name:'Return',description:'Return', type:'oeel.Plotly',defaultValue:null,optional:true} // change the return type accordingly OR remove this line if the function doesnâ€™t have an output
            ]
            
var reference={name:'donutChart',license:'MIT', description:'Return a donut chart of the values, with labels and title', contributors:['Agathe Archidoit']};
// reference can get any supplementary field that can be relevant, in particular
// "experimental" which add a small flask to highlight the experimental point in the documentation,
// "DOI" that automatically add a citation field in the documentation with APA citation,
// but many other can be added such as "contributors" ...

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath,oeel){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
    var plotObject=oeel.plotly.plot();
    var l = inputDictionary.Values.length;
    var data = [];
    
    if (inputDictionary.Values.length != inputDictionary.labels.length){
      throw 'Not as many properties as legends';
    }
    
    var layout = {
      title: inputDictionary.title,
      height: 400,
      width: 600,
      showlegend: true,
      grid: {rows: 1, columns: inputDictionary.Values.length}
    }
    
    for (var i = 0; i < l; i++){
      data[i] = {
        values : inputDictionary.Values[i],
        labels : inputDictionary.labels[i],
        domain : {column: 0},
        name : inputDictionary.propertyDescription,
        hoverinfo : 'label+percent+name',
        hole : .4,
        type : 'pie'
        }
        
      layout.annotations = [{
          font: {size: 20},
          showarrow: false,
          text: inputDictionary.propertyDescription,
          x: 0.17,
          y: 0.5}]
    }
    
    plotObject.addCustom(data)
    plotObject.setLayout(layout);
    return plotObject;
  }
}
