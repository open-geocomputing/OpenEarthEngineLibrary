// SPDX-License-Identifier: LGPL-3.0-or-later
var inputs=[
            {name:'Return',description:'Return', type:'oeel.Plotly',defaultValue:null,optional:true} // change the return type accordingly OR remove this line if the function doesnâ€™t have an output
            ]
            
var reference={name:'plot',license:'LGPL-3.0-or-later', description:'Create a empty plot object to get Plotly plots', contributors:["Mathieu Gravey"]};

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};};

exports.createFunction=function(internal,relPath,oeel){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
    
    var plotObject={
      toEE:false,
      data:[],
      layout:{
      
      },
      annotations:[],
      widgetsList:[],
      eventListener:{test:true},
      draw:function(withoutHeader){
        withoutHeader=withoutHeader||false;
        var obj={};
        var toSend=['data','toEE','layout','transparent','exportFormat','exportName','exportScale','onClick','annotations'];
        for( var idx=0; idx< toSend.length; idx++){
          var key=toSend[idx];
          if(key in this) obj[key]=this[key];
        }
        return (withoutHeader?"":"OEEex_AddonPlotly:")+oeel.plotly.directDraw(obj);
      },
      display:function(){print(this.draw());},
      print:function(){print(this.draw());},
      widget:function(style){
        var widg=ui.Textbox('OEEex_Active_AddonPlotly',this.draw(true),this.receivedEvent,false,style)
        this.widgetsList.push(widg)
        return widg
      },
      setLayout:function(l){this.layout=l},
      addPlot:function(plot){this.data=this.data.concat(plot.data)},
      addCustom:function(){
        var arg=arguments;
        for (var i =0; i<arg.length ; i++) {
          if(Array.isArray(arg[i]))
            this.addCustom.apply(this,arg[i])
          else
            this.data.push(arg[i]);
        }
      },
      receivedEvent:function(str){plotObject.onEvent(JSON.parse(str))},
      onEvent:function(json){
        if(json.toEE===true){
          var type=json.type;
          if(this.eventListener[type]!==undefined){
            for (var i=0; i<this.eventListener[type].length; i++){
              this.eventListener[type][i](json.plotlyData, plotObject)
            }
          }
          if(type.indexOf('plotly_')===0)
          {
            json.type=json.type.slice("plotly_".length);
            this.onEvent(json);
          }
        }
      },
      on:function(type,f){
        if(! this.eventListener[type])
          this.eventListener[type]=[];
        this.eventListener[type].push(f);
      },
      update:function(){
        var value=this.draw(true);
        for(var i=0; i<this.widgetsList.length; i++)
        {
          this.widgetsList[i].setValue(value,true);
        }
      },
      addEventListener:function(type,f){this.on(type,f)},
      addAnnotations:function(ann){
        if(!Array.isArray()){
         ann=[ann]; 
        }
        this.annotations=this.annotations.concat(ann);
      }
    };
    return plotObject;
  };
};

