// SPDX-License-Identifier: MIT
var inputs=[{name:'sinceEpoch',description:'define each property locally or the absolute cumulated since epoch (01.01.1970)', type:'boolean', defaultValue:false, optional:false},
            {name:'timeVariable',description:'The name of the variable to use. ‘start’, ‘end’, or ‘both’ are using the system time any other name can be used too.', type:'string|object', defaultValue:'start', optional:false},
            {name:'timeZone',description:'The time zone.', type:'string', defaultValue:'UTC', optional:false},
            {name:'image',description:'The image on which to add the time properties.', type:'ee.Image',optional:true},
            {name:'feature',description:'The feature on which to add the time properties.', type:'ee.Feature',optional:true},
            {name:'collection',description:'The collection on which to add the time properties', type:'ee.Collection',optional:true},
            {name:'Return',description:'Return', type:'function|ee.Image|ee.Feature|ee.Collection',defaultValue:null,optional:true}]
            
var reference={name:'addTimeProperties',license:'MIT', description:'Simply add some time metric (day, month, year ...) derived from system:time_start', contributors:['Mathieu Gravey']};


exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath){
return function(){
  
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
   
    var sinceEpoch=inputDictionary.sinceEpoch;
    var timeZone=inputDictionary.timeZone;
   
    if(internal.typeObject(inputDictionary.timeVariable)=='string')
      if(inputDictionary.timeVariable=='both')
        var timeVar=['start','end'];
      else
        var timeVar=[inputDictionary.timeVariable];
    else
      var timeVar=inputDictionary.timeVariable;
   
   var epoch=ee.Date.fromYMD(1970, 1, 1, timeZone);
   
    var fun=function(ft){
      var obj={};
      for (var i=0; i<timeVar.length; i++){
        var localName=timeVar[i];
        if(localName=='start'){
          var time=ee.Date(ft.get('system:time_start'));
        }else if(localName=='end'){
          var time=ee.Date(ft.get('system:time_end'));
        }else {
          var time=ee.Date(ft.get(localName));
        }
        
        if(sinceEpoch){
          obj["oeel:"+localName+"_hour_epoch"]=time.difference(epoch,'hour').floor();
          obj["oeel:"+localName+"_minute_epoch"]=time.difference(epoch,'minute').floor();
          obj["oeel:"+localName+"_second_epoch"]=time.difference(epoch,'second').floor();
          obj["oeel:"+localName+"_day_epoch"]=time.difference(epoch,'day').floor();
          obj["oeel:"+localName+"_week_epoch"]=time.difference(epoch,'week').floor();
          obj["oeel:"+localName+"_month_epoch"]=time.difference(epoch,'month').floor();
          obj["oeel:"+localName+"_year_epoch"]=time.difference(epoch,'year').floor();
        }
        else{
          obj["oeel:"+localName+"_hour"]=time.get('hour', timeZone);
          obj["oeel:"+localName+"_minute"]=time.get('minute', timeZone);
          obj["oeel:"+localName+"_second"]=time.get('second', timeZone);
          obj["oeel:"+localName+"_day"]=time.get('day', timeZone);
          obj["oeel:"+localName+"_week"]=time.get('week', timeZone);
          obj["oeel:"+localName+"_month"]=time.get('month', timeZone);
          obj["oeel:"+localName+"_year"]=time.get('year', timeZone);
        }

      }
      
      return ft.setMulti(obj);
    }
    
    //im.date().difference(0, 'day').floor()
    if(inputDictionary.image)
      return fun(inputDictionary.image);
    if(inputDictionary.feature)
      return fun(inputDictionary.feature);
    if(inputDictionary.collection)
      return inputDictionary.collection.map(fun);

    return fun;
  }
}
