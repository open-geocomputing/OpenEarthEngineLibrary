// SPDX-License-Identifier: MIT
var inputs=[{name:'radius',description:'The radius of the windows used to get neighbors.', type:'integer',defaultValue:10 ,optional:false},
            {name:'power',description:'The power of the inverse distance', type:'number',defaultValue:2 ,optional:false},
            {name:'useConvolution',description:'Use traditional neighborhood reduction or convolution', type:'boolean',defaultValue:true ,optional:false},
            {name:'image',description:'The image on which to run the computation', type:'ee.Image',optional:true},
            {name:'imageCollection',description:'The image collection on which to run the computation', type:'ee.ImageCollection',optional:true},
            {name:'Return',description:'Return', type:'function|ee.Image',defaultValue:null,optional:true}]
            
var reference={name:'InverseDistanceInterpolation',license:'MIT', description:'Compute a gap filling interpolation using inverse distance weighting. It returns a function, or apply on an image if "image" is informed and return the result of the computation.', contributors:['Mathieu Gravey']};

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);

    var p=inputDictionary.power;
    
    var val=[]
    var xSize=inputDictionary.radius
    var ySize=inputDictionary.radius;
    for (var x=0;x<2*xSize+1;x++){
      val[x]=[];
      for (var y=0;y<2*ySize+1;y++)
        val[x][y]=Math.pow((x-xSize)*(x-xSize)+(y-ySize)*(y-ySize),p/2);
    }


    var kernel=ee.Kernel.fixed(2*xSize+1, 2*ySize+1, val, xSize, ySize, false).inverse();
    var fun=function(im){
      if(inputDictionary.useConvolution){
        var x=im.mask().convolve({kernel: kernel});
        var result=im.unmask(0).convolve({kernel: kernel,})
        .divide(im.mask().convolve({kernel: kernel})).updateMask(x.gt(0.0001));
      }
      else{
        var result=im.reduceNeighborhood({
          reducer:'sum',
          kernel: kernel,
          skipMasked: false}).divide(
            im.mask().reduceNeighborhood({
          reducer:'sum',
          kernel: kernel,
          skipMasked: false}
          ))
      }
      return result.where(im,im).reproject(im.projection());
    }

    if(inputDictionary.image)
      return fun(inputDictionary.image);
    if(inputDictionary.imageCollection)
      return inputDictionary.imageCollection.map(fun);

    return fun;
  }
}

