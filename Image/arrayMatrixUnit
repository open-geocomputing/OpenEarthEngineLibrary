var inputs=[{name:'N',description:'number of rows', type:'ee.Image',optional:false},
            {name:'M',description:'number of columns', type:'ee.Image',optional:false},
            {name:'I',description:'row index (0 indexed)', type:'ee.Image',optional:false},
            {name:'J',description:'column index (0 indexed)', type:'ee.Image',optional:false},
            {name:'Return',description:'Return', type:'ee.Image',defaultValue:null,optional:true} // change the return type accordingly OR remove this line if the function doesnâ€™t have an output
            ]
            
var reference={name:'arrayMatrixUnit',license:'MIT', description:'This function returns an ee.Image with for each pixel a (n,m) matrix of 0 with a single 1 in the position (i,j)', contributors:['Agathe Archidoit','Mathieu Gravey']};

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath,oeel){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
    
    var arrayN = ee.Image.constant(ee.Array([[0]])).arrayRepeat(1, inputDictionary.N);
    var arrayM = ee.Image.constant(ee.Array([[0]])).arrayRepeat(1, inputDictionary.M);

    var M = arrayN.multiply(0).add(1).arrayAccum(1, ee.Reducer.sum()).eq(inputDictionary.I.add(1)).matrixTranspose().matrixMultiply(arrayM.multiply(0).add(1).arrayAccum(1, ee.Reducer.sum()).eq(inputDictionary.J.add(1)));
  
    return M;
    
  }
}
