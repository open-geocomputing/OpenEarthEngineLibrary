// SPDX-License-Identifier: LGPL-3.0-or-later
var inputs=[{name:'covFun',description:'The covariance function,fun(ee.Array)', type:'function' ,optional:false},
            {name:'radius',description:'The radius of the windows used to get neighbors.', type:'integer',defaultValue:10 ,optional:false},
            {name:'skipInfomed',description:'Do not compute on informed locations. To set to false in presence of a kernel with a 0 in the center', type:'boolean',defaultValue:true,optional:false},
            {name:'kernel',description:'Neighbors with weight equal to 0 are ignored, the size needs to be compatible with the radius.', type:'ee.Kernel|ee.Array',optional:true},
            {name:'image',description:'The image on which to run the computation.', type:'ee.Image',optional:true},
            {name:'imageCollection',description:'The image collection on which to run the computation', type:'ee.ImageCollection',optional:true},
            {name:'Return',description:'Return', type:'function|ee.Image',defaultValue:null,optional:true}]
            
var reference={name:'kriging',license:'LGPL-3.0-or-later', description:'Compute a gap filling interpolation using kriging. It returns a function, or apply on an image if "image" is informed and return the result of the computation.', contributors:['Mathieu Gravey']};

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
    
    var halfSize=inputDictionary.radius;
    var dataKernel=inputDictionary.kernel;

    var X=ee.Array(ee.List.sequence(-halfSize,halfSize,1)).repeat(1, halfSize*2+1)//.reshape([-1]);
    var Y=ee.Array(ee.List.sequence(-halfSize,halfSize,1)).repeat(1, halfSize*2+1).transpose()//.reshape([-1]);
    var covFun=inputDictionary.covFun;
    
    var numberOfElement=(halfSize*2+1)*(halfSize*2+1);
    
    var dist=ee.Array.cat([X,Y], 2);
    
    var distK=dist.reshape([-1,1,2]).repeat(1,numberOfElement).subtract(dist.reshape([1,-1,2]).repeat(0,numberOfElement));
    distK=distK.pow(2).reduce(ee.Reducer.sum(), [2]).sqrt().reshape([(halfSize*2+1)*(halfSize*2+1),(halfSize*2+1)*(halfSize*2+1)]);
    var K=covFun(distK);
    K=K.add(ee.Array.identity(numberOfElement)).pad([(numberOfElement+1),(numberOfElement+1)],1).subtract(ee.Array.identity((numberOfElement+1)));
    
    var K0=covFun(dist.pow(2).reduce(ee.Reducer.sum(), [2]).sqrt().reshape([-1,1])).pad([numberOfElement+1,0],1);
    
    var ImageKc=ee.Image.constant(K);
    var ImageK0c=ee.Image.constant(K0);
    
    var kernel=ee.Kernel.square(halfSize);

    var ker=ee.Kernel.circle(5).getInfo();

    if(dataKernel && internal.typeObject(dataKernel)=='ee.Kernel'){
      var ker=dataKernel.getInfo().weights.replace(/\n/g, ",")
      var val='['+ker.slice(1,ker.length)+']';
      dataKernel=ee.Array(JSON.parse(val));
    }
    
    var fun=function(im){
      
      var mask=im.mask().neighborhoodToArray({kernel:kernel, defaultValue:0})
      if(dataKernel)
      {
        mask=mask.multiply(dataKernel);
      }
      mask=mask.arrayReshape(ee.Array([-1]),1).arrayPad([numberOfElement+1],1);
      var r=im.unmask(0).neighborhoodToArray({kernel:kernel, defaultValue:0}).arrayReshape(ee.Array([-1]),1).arrayPad([numberOfElement+1],0).arrayMask(mask);
    
      mask=mask.arrayReshape(ee.Array([-1,1]),2);
      

      var ImageK0=ImageK0c.arrayMask(mask);
      
      var dataSize=ImageK0.gt(0).arrayReduce(ee.Reducer.sum(),[0]).arrayGet([0,0]).gt(3);
      
      var coef=ImageKc.arrayMask(mask).arrayTranspose().arrayMask(mask).matrixSolve(ImageK0).arrayReshape(ee.Array([-1]),1);
      var estimate=coef.multiply(r).arrayReduce(ee.Reducer.sum(),[0]).arrayGet([0]).updateMask(dataSize);
      var variance=coef.multiply(ImageK0.arrayReshape(ee.Array([-1]),1)).arrayReduce(ee.Reducer.sum(),[0]).subtract(covFun(ee.Array([0]))).arrayGet([0])
              .subtract(coef.arrayGet([-1]).multiply(2)).multiply(-1).updateMask(dataSize);
      
      if(inputDictionary.skipInfomed){
        estimate=estimate.where(im,im);
        variance=variance.where(im,0);
      }
      var reuslt=im.addBands([estimate.rename('estimate'),variance.rename('variance')]);
      
      reuslt=reuslt.reproject(im.projection())
      return reuslt;
    }
    
    if(inputDictionary.image)
      return fun(inputDictionary.image);
    if(inputDictionary.imageCollection)
      return inputDictionary.imageCollection.map(fun);

    return fun;
  }
}

