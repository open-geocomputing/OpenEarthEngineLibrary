var inputs=[{name:'Map',description:'The Map to mapshot', type:'object',optional:true},
            {name:'scalingFactor',description:'A factor to scale resolution compared to the displayed', type:'number',optional:true},
            {name:'mode',description:'Select the output mode (widget, URL, ExportDrive, ee.Image )', type:'string',optional:true},
            {name:'geometry',description:'Geometry of export, default same as Map', type:'ee.Geometry',optional:true},
            {name:'name',description:'Name used in ExportDrive mode', type:'string',optional:true},
            {name:'northSymbol',description:'Add a North symbol (e.g., "arrow-top-right")', type:'string',optional:true},
            {name:'displayScale',description:'Add a scale in metric system (e.g., "top-left", "bottom-center-reverseColor", don\'t use the same as the arrow', type:'string',optional:true},
            {name:'Return',description:'Return', type:'object|ee.Image|string',defaultValue:null,optional:true}
            ]
            
print(geometry.distance(geometry2))
            
var reference={name:'mapshot',license:'MIT', description:'To take a mapshot of a given ui.Map', contributors:['Mathieu Gravey']};

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath,oeel){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);
    
    var localMap=inputDictionary.Map;
    if(!localMap){
      localMap=Map;
    }
    
    var mode=inputDictionary.mode
    if(!mode){
      mode='widget';
    }

    var scalingFactor=inputDictionary.scalingFactor;
    if(!scalingFactor){
      scalingFactor=1;
    }
    
    var exportName=inputDictionary.name
    if(!exportName){
      exportName="Mapshot"
    }

    var geometryJSON=ee.Geometry(localMap.getBounds(true))
    if(inputDictionary.geometry){
      geometryJSON=inputDictionary.geometry
    }
    var geo=geometryJSON.transform('EPSG:3857',10).coordinates().get(0).getInfo();;
    var geometry=[geo[0][0],geo[0][1],geo[1][0],geo[2][1]];
    
    var factor=Map.getScale()/scalingFactor;
    var dim=Math.round((geometry[2]-geometry[0])/factor)+'x'+Math.round((geometry[3]-geometry[1])/factor);

    var layers=localMap.layers()
    var imCol=ee.ImageCollection(layers.map(function(layer){
      return layer.getEeObject().visualize(layer.getVisParams()).set("shown",layer.getShown(),"name",layer.getName(),"opacity",layer.getOpacity())
    })).filter(ee.Filter.equals("shown",true));
    
    if(inputDictionary.northSymbol){
      var symboleKey=inputDictionary.northSymbol.toLowerCase().split('-');
      var height=geometry[3]-geometry[1];
      var width=geometry[2]-geometry[0];
      
      var symboleWidthScale=(symboleKey[0]=='arrow'?40:100)
      
      imCol=imCol.merge(ee.ImageCollection([
        oeel.Map.symbol({symbol:symboleKey[0],mode:'image',
        scale:Map.getScale()/2000,
        point:
        // no idea why getInfo is needed maybe something in the symbol
      ee.Geometry(ee.Geometry.Point([(symboleKey[2]=='left'?geometry[0]+Map.getScale()*symboleWidthScale:geometry[2]-Map.getScale()*symboleWidthScale),(symboleKey[1]=='bottom'?geometry[1]+Map.getScale()*100:geometry[3]-Map.getScale()*100)],'EPSG:3857').getInfo())})
      .set('shown',true,'opacity',1)
      ]))
    }

    if(inputDictionary.displayScale){
      var symboleKey=inputDictionary.displayScale.toLowerCase().split('-');
      var height=geometry[3]-geometry[1];
      var width=geometry[2]-geometry[0];
      
      switch(symboleKey[1]){
        case 'left':
          var x=geometry[0]+Map.getScale()*10;
          var scaleDir='right';
          break;
        case 'center':
        case 'centered':
          var x=(geometry[2]+geometry[0])/2;
          var scaleDir='center';
          break;
        default:
          var x=geometry[2]-Map.getScale()*10;
          var scaleDir='left';
      }
      var PointScale=ee.Geometry(ee.Geometry.Point([x,(symboleKey[0]=='bottom'?geometry[1]+Map.getScale()*20:geometry[3]-Map.getScale()*20)],'EPSG:3857').transform('EPSG:4326', 1).getInfo())
     
      imCol=imCol.merge(ee.ImageCollection([
        oeel.Map.scaleLayer({
          mapScale:Map.getScale(),
          point: PointScale,
          size:3,
          color1:(symboleKey[2]=='reversecolor'?"white":"black"),
          color2:(symboleKey[2]=='reversecolor'?"black":"white"),
          scale:15,
          direction:scaleDir
        }).set('shown',true,'opacity',1)
      ]))
    }
    
    imCol=imCol.map(function(layerImage){
      var im=ee.Image(ee.Algorithms.If({
        condition:layerImage.bandNames().size().eq(1),
        trueCase:ee.Image.rgb(layerImage,layerImage,layerImage),
        falseCase:layerImage,
      }))
      return im.updateMask(im.mask().multiply(layerImage.getNumber("opacity")));
    })
    
    var im=imCol.mosaic();
    

    //var url=
    
    switch (mode.toLowerCase()) {
      case 'ee.image':
      case 'image':
        return im;
      case 'link':
      case 'url':
        return im.reproject('EPSG:3857',null,localMap.getScale()/scalingFactor).getDownloadURL({region:geometryJSON,format:'png',dimensions:dim});;
      
      case 'export':
      case 'exportdrive':
        Export.image.toDrive({
          image:im,
          description:exportName,
          fileNamePrefix:exportName,
          dimensions:dim,
          region:geometryJSON
        });
        break;
      case 'widget':
      default:
        return ui.Thumbnail(im.reproject('EPSG:3857',null,localMap.getScale()/scalingFactor),{region:geometryJSON,format:'png',dimensions:dim});
    }
  }
}