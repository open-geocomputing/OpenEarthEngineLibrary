// SPDX-License-Identifier: MIT
var inputs=[{name:'difference',description:'The maximum difference for which the filter will return true.', type:'number|ee.Number',optional:false},
            {name:'leftField',description:'A selector for the left operand. Should not be specified if leftValue is specified.', type:'ee.String|string|null', defaultValue:null, optional:false},
            {name:'rightValue',description:'The value of the right operand. Should not be specified if rightField is specified.', type:'ee.String|string|null', defaultValue:null, optional:false},
            {name:'rightField',description:'A selector for the right operand. Should not be specified if rightValue is specified.', type:'ee.String|string|null', defaultValue:null, optional:false},
            {name:'leftValue',description:'The value of the left operand. Should not be specified if leftField is specified.', type:'ee.String|string|null', defaultValue:null, optional:false},
            {name:'asymmetry',description:"The type of asymmetry. ('gt','lt','gte','lte','none')", type:'string', defaultValue:'gt', optional:false},
            {name:'Return',description:'Return', type:'ee.Filter',defaultValue:null,optional:true} // change the return type accordingly OR remove this line if the function doesnâ€™t have an output
            ]

var reference={name:'asymmetricMaxDifference',license:'MIT', description:'Create an asymetric max difference filter'};

exports.createDocumentation=function(){ return {inputs:inputs, reference:reference};}

exports.createFunction=function(internal,relPath){
return function(){
    var inputDictionary=internal.readInputs(Array.prototype.slice.call(arguments,0),inputs,reference,relPath);
    internal.addRef(reference,relPath);

    var difference=inputDictionary.difference;
    var leftField=inputDictionary.leftField;
    var rightValue=inputDictionary.rightValue;
    var rightField=inputDictionary.rightField;
    var leftValue=inputDictionary.leftValue;
    
    var mainFilter=ee.Filter.maxDifference(difference, leftField, rightValue, rightField, leftValue);
    var extraFilter=null
    
    switch (inputDictionary.asymmetry) {
      case 'gt':
        extraFilter=ee.Filter.greaterThan(leftField, rightValue, rightField, leftValue);
        break;
      case 'lt':
        extraFilter=ee.Filter.lessThan(leftField, rightValue, rightField, leftValue);
        break;
      case 'gte':
        extraFilter=ee.Filter.greaterThanOrEquals(leftField, rightValue, rightField, leftValue);
        break;
      case 'lte':
        extraFilter=ee.Filter.lessThanOrEquals(leftField, rightValue, rightField, leftValue);
        break;
    }
    
    if(extraFilter)
      return ee.Filter.and(mainFilter,extraFilter);
    else
      return mainFilter;
  }
}
